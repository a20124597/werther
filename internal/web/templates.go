// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/.DS_Store (6.148kB)
// templates/email-notify.tmpl (285B)
// templates/forget-succ.tmpl (430B)
// templates/forget.tmpl (1.178kB)
// templates/login.tmpl (2.077kB)
// templates/reset-succ-noti.tmpl (372B)
// templates/reset-succ-redi.tmpl (766B)
// templates/reset.tmpl (1.708kB)
// templates/static/login-bg.jpg (3.38kB)
// templates/static/style.css (2.154kB)

package web

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Ds_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x41\x6a\xc3\x30\x10\x45\xff\xa8\xa6\x08\xba\xd1\xb2\x4b\x5d\xa1\x37\x10\xc6\x3d\x81\x2f\xd0\xd2\x42\x29\x14\x17\x5a\x27\x6b\xaf\x72\xae\x1c\x2d\x18\xfd\x90\x10\xdb\xc1\x9b\x10\x27\xfc\x07\xe2\x2d\x3c\x23\x1b\x2f\xa4\x99\x01\x60\xe5\xea\xf3\x05\x08\x00\x3c\xb2\xb1\xc1\x28\x9e\x6b\x80\xa3\x2d\xaf\x00\x7c\xe3\x63\x5d\xff\x35\x3f\xbf\xcd\xd7\xf8\x5e\x03\xfa\xdc\x47\xfc\xa3\xc5\x3b\xda\x93\x7c\x9b\xb9\x87\x10\x42\x08\x21\xe6\xc3\xfb\xd5\x3f\x5d\xfb\x43\x84\x10\x8b\xa3\x3f\x1f\x22\x9d\xe8\x2e\xdb\xf8\xdc\xd1\xc5\x51\x4e\xa0\x23\x9d\xe8\x2e\xdb\x18\xe7\xe8\x82\xf6\x74\xa0\x23\x9d\xe8\x2e\x9b\x87\x96\xb1\xf9\x30\xbe\xd9\xd8\xa1\x58\xa0\x23\x9d\x2e\xf3\x6f\x84\xb8\x75\x1e\xb2\x42\x7f\xff\xbf\x4e\xf7\xff\x42\x88\x3b\xc6\x8a\xaa\xae\xca\x33\x03\x37\xc7\x42\xe0\x8d\x31\xdb\x7d\xe2\x44\x21\xe0\xf2\xc0\xf0\x19\x87\x38\x15\x03\x42\x2c\x88\x5d\x00\x00\x00\xff\xff\x8a\xfb\x05\x34\x04\x18\x00\x00")

func Ds_storeBytes() ([]byte, error) {
	return bindataRead(
		_Ds_store,
		".DS_Store",
	)
}

func Ds_store() (*asset, error) {
	bytes, err := Ds_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".DS_Store", size: 6148, mode: os.FileMode(0644), modTime: time.Unix(1575888537, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x26, 0xba, 0xfc, 0xec, 0x90, 0x62, 0x9, 0xb, 0xe3, 0x66, 0x11, 0x52, 0x34, 0xf7, 0xa9, 0xc, 0x66, 0x23, 0x4, 0xd6, 0x63, 0xe, 0xbf, 0x23, 0x1f, 0x65, 0xea, 0xcf, 0x26, 0x30, 0x60}}
	return a, nil
}

var _emailNotifyTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\xc9\x2c\xc9\x49\x55\x52\xa8\xad\xe5\x52\x50\x50\x50\x78\xba\xbe\xed\xf9\x82\xc6\x97\xed\xbd\xcf\xf7\xae\x7b\x39\x79\xdf\xb3\xbe\xa5\x5c\xd5\xd5\x0a\xa9\x79\x29\x20\x05\x5c\x48\xda\x8a\x4b\x2a\xa1\xda\xb0\xcb\x67\x15\xe3\x91\x4c\xce\xcf\x2b\x49\xcd\x2b\x81\xdb\x6a\x93\x92\x59\xa6\x90\x9c\x93\x58\x5c\x6c\xab\x54\x90\x98\x9e\xaa\x5b\x94\x5a\x9c\x5a\xa2\x64\x07\x96\x04\x2b\x28\xb0\x7b\xbe\x70\xdd\x8b\x75\x4b\x9e\x75\x4e\x7e\xba\xa7\x41\xa1\xba\x5a\x41\x2f\x08\xa4\x26\x34\xc8\x47\xa1\xb6\xd6\x46\xbf\xc0\xce\x46\x3f\xa9\x08\x49\x43\xa2\x42\x46\x51\x6a\x9a\xad\x52\x75\xb5\x9e\x47\x51\x6a\x5a\x68\x90\x4f\x6d\xad\x92\xdd\xf3\xa6\x9d\x4f\xdb\x77\xbf\xd8\x3f\xfb\x69\xeb\x52\x1b\xfd\x44\x88\x7a\x1b\xfd\x94\xcc\x32\x3b\x84\x53\x01\x01\x00\x00\xff\xff\x71\xee\xc9\xf6\x1d\x01\x00\x00")

func emailNotifyTmplBytes() ([]byte, error) {
	return bindataRead(
		_emailNotifyTmpl,
		"email-notify.tmpl",
	)
}

func emailNotifyTmpl() (*asset, error) {
	bytes, err := emailNotifyTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "email-notify.tmpl", size: 285, mode: os.FileMode(0644), modTime: time.Unix(1576044225, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x5f, 0x3f, 0x71, 0x9a, 0x7c, 0x20, 0xa2, 0x2b, 0xb5, 0xbb, 0x28, 0xf5, 0xe5, 0x3d, 0x8f, 0x60, 0xe9, 0x89, 0x4d, 0x3f, 0x7c, 0x3f, 0x6d, 0xd, 0x3d, 0xba, 0x39, 0x92, 0xf, 0xba, 0xf1}}
	return a, nil
}

var _forgetSuccTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x4a\xc3\x40\x10\xc7\xef\x7d\x8a\x71\xef\x6d\xc5\xa3\x36\xf5\xe4\x2b\x78\x8f\xd9\x69\xbb\xba\xdd\x0d\xd9\x25\x28\xcb\x82\x15\xb1\x22\x68\x15\xbd\x78\x2a\x3d\x14\x04\x21\x45\x0b\xf6\xa4\xbe\x8c\xd9\x36\x6f\x21\x49\x84\xe6\x50\x6f\xb3\xf3\xdb\xf9\x7f\x18\x03\x14\x3b\x4c\x20\x10\xcd\x34\x47\x02\xd6\xd6\x00\x00\xd2\xc9\x6b\x7a\xf5\xfc\xf3\x3d\x71\x83\x99\xbb\xbe\x4f\x6f\xc6\x35\x63\x00\x05\xcd\x3f\xd4\x2a\x67\x4a\x9f\x55\xce\x5a\x9c\x89\x13\x88\x90\x7b\x25\x50\x3d\x44\x4d\xa0\x17\x61\x27\xdf\xf8\x9a\x05\xcd\x02\x34\x02\xa5\xf6\x63\x8c\x14\x93\xc2\x33\x06\x1a\x87\xe5\x0c\xd6\x92\xf6\x3f\x56\xc7\xaa\xf0\xd9\x0c\x03\x29\x34\x0a\xbd\x4e\x42\x59\x0c\x01\xf7\x95\xf2\x08\x97\x5d\x26\x48\xbb\xd8\x6f\x64\x75\x15\x44\x88\x82\x40\x91\xcd\x23\xa1\x4f\x29\x13\xdd\xfa\x91\xd4\x5a\xf6\x77\x61\x67\x3b\x3c\xdd\x62\xfd\x50\x46\xda\x17\x7a\xaf\x22\x55\xc8\x85\x6d\xc8\x86\xb7\xcb\xcf\x24\x7b\xfc\x72\x77\xd3\x74\xf1\x9e\x8e\x1e\xb2\xf3\xc1\x6a\x38\xcf\x2e\x92\x65\xf2\x06\x79\xc3\x83\xbe\xcf\x38\x58\x0b\xab\xd9\xc2\xcd\x5f\xdc\xe5\xc8\x8d\xa7\xee\xe9\x03\x5a\xcd\xb0\x92\xad\x49\x59\x5c\x3e\xff\xc6\x75\xdf\xdf\x00\x00\x00\xff\xff\xb1\xc5\x24\xc4\xae\x01\x00\x00")

func forgetSuccTmplBytes() ([]byte, error) {
	return bindataRead(
		_forgetSuccTmpl,
		"forget-succ.tmpl",
	)
}

func forgetSuccTmpl() (*asset, error) {
	bytes, err := forgetSuccTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "forget-succ.tmpl", size: 430, mode: os.FileMode(0644), modTime: time.Unix(1576044225, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xe3, 0x66, 0x9f, 0x10, 0xa7, 0x5d, 0x8c, 0x5a, 0x97, 0x74, 0x63, 0x52, 0x72, 0x9d, 0x69, 0x1c, 0x3f, 0xb2, 0x3b, 0xc3, 0x3f, 0xc0, 0x52, 0x44, 0x18, 0x6e, 0xc4, 0x82, 0xb3, 0xeb, 0x78}}
	return a, nil
}

var _forgetTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x31\x8f\xd3\x4c\x10\xad\x93\x5f\x31\xdf\x14\x5f\x97\x84\x13\x54\x10\x87\x02\x71\x12\x12\x08\x74\x77\xd0\x9e\xd6\xde\x71\xbc\xdc\x7a\xd7\xec\xae\xc3\x45\x56\x0a\x9a\x13\x0d\xe2\x0a\x0a\xe8\x40\xa2\x40\x42\x02\x3a\x24\x1a\xfe\x0c\xb9\xe3\x67\xa0\x5d\xdb\x8a\xe3\x0b\x74\xa3\xf7\xde\xcc\x1b\xbf\xdd\x75\x55\x01\xa7\x54\x28\x02\x74\xc2\x49\x42\x58\xad\x86\x83\xf5\xcf\xb7\xbf\xbf\x7c\x5b\x7f\x3d\xbb\x7c\xff\x62\x58\x55\x40\x8a\x7b\x7c\xd8\x51\x5b\xb7\x6c\xd4\x00\x00\x53\x29\xd4\x09\x18\x92\x51\x4d\xd8\x8c\xc8\x21\x64\x86\x52\x8f\x30\x27\x92\x49\x20\xc6\x89\xb5\xb7\x17\x64\xac\xd0\x2a\xaa\x2a\x18\x3f\xa9\x6b\x58\xad\x70\xf6\x17\xab\xa7\x36\xf8\xec\x26\x13\xad\x1c\x29\xb7\xd9\x84\x8b\x05\x24\x92\x59\x1b\xa1\xd4\x73\xa1\x10\x82\x71\x84\xcf\x05\x77\xd9\xcd\xeb\x37\xae\x15\xa7\xff\x89\xbc\xd0\xc6\x31\xe5\x70\x16\xba\x76\x76\x8e\x6c\x62\x88\x54\x47\xd2\x97\xb1\xa2\x18\xd5\xb1\x6d\x6b\x82\x2e\xdb\x9b\x75\x73\x9c\x4e\xb2\xbd\xde\xa4\x09\x17\x8b\x1e\x94\x6a\x93\x6f\x2f\xe1\x11\x04\x60\x89\xf3\x91\xa1\xcf\xec\xf1\xc1\x7d\x9f\x17\xe4\xe4\x32\xcd\x23\x7c\xf4\xf0\xf0\x68\xd7\x06\x42\x15\xa5\x03\xb7\x2c\x28\xc2\x4c\x70\x4e\x0a\x41\xb1\x9c\x22\x4c\xac\x49\x8f\x9d\x3e\xf1\xc8\x82\xc9\x92\xc2\x59\xdc\x39\x3c\xd8\x3f\xf2\x20\xac\x56\xb3\xe1\x60\x30\x18\xfc\x63\x44\xd8\xee\x38\xc9\x98\x94\xa4\xe6\xb4\x35\xa7\x05\xc3\x9c\x2b\x6b\x75\x02\xf4\xa7\x67\xb4\x1c\xcd\x8d\x2e\x0b\xac\x3d\xb7\x4d\x1d\x9d\x3a\xec\x25\x22\x48\xf2\xd6\x0f\x11\x0a\xc9\x12\xca\xb4\xe4\x64\x22\x5c\x7f\xf8\xbc\x3e\x7b\x77\xf9\xe6\xd3\xc5\xcb\xef\xeb\xf3\x57\x08\xcd\xba\xa5\x25\xe3\x2b\x04\xc1\xdb\x41\x1e\x43\x30\xf4\xac\x14\x86\x78\xeb\x2e\x59\x4c\x72\x87\xe3\x48\x24\x5a\x41\x5a\x8a\xa6\x2f\xd5\xa6\xe5\xc3\xe0\xd9\x74\x12\x5a\x77\x7c\xf1\xd5\x83\x0e\x70\x5c\x3a\xa7\x55\x6b\x15\x3b\x05\xb1\x53\xa3\xc2\x88\x9c\x99\x65\xa8\x25\x33\x73\x0a\x55\x2c\x75\x72\x82\x4d\x28\xb6\x8c\x73\xe1\x10\x66\x17\xaf\xcf\x7f\xfd\xf8\x38\x9d\xd4\x93\xfa\xd7\xcb\x5f\x9d\x1e\x56\xb4\x6e\x39\x59\xcb\xe6\x54\x67\xee\xa9\xaa\x02\x91\xc2\xf8\x9e\x5a\x30\x29\xf8\xbe\xbf\x87\xfe\x57\xb0\x61\xc7\x77\x8d\xd1\xe6\x41\xdd\xd7\x70\x0d\x45\xd2\x52\x57\xfd\xbf\x8a\x6d\x71\xab\x2b\xa8\x1f\xae\x8f\x77\x52\x74\x9e\xdc\x26\x98\xa6\xdc\x68\xff\x04\x00\x00\xff\xff\x6c\x3c\x0e\x7f\x9a\x04\x00\x00")

func forgetTmplBytes() ([]byte, error) {
	return bindataRead(
		_forgetTmpl,
		"forget.tmpl",
	)
}

func forgetTmpl() (*asset, error) {
	bytes, err := forgetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "forget.tmpl", size: 1178, mode: os.FileMode(0644), modTime: time.Unix(1576044225, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x85, 0xeb, 0x5d, 0xa0, 0xc8, 0x89, 0x16, 0x80, 0x0, 0xa4, 0x92, 0x71, 0x5c, 0x57, 0xf8, 0x94, 0x97, 0x59, 0xc0, 0xe5, 0x19, 0x77, 0x1e, 0xae, 0xb6, 0xe9, 0xb5, 0xa4, 0x6, 0x41, 0x97}}
	return a, nil
}

var _loginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x41\x6f\xc3\x34\x14\x3e\xb7\xbf\xc2\xf2\x81\x5b\x17\x0d\x71\xa3\xc9\x0e\x88\x49\x48\x20\xd0\x36\xb8\x4e\x8e\xf3\xd2\x98\x3a\x76\xb0\x9d\xb2\x29\xaa\xb4\x1d\x98\x38\x80\x0a\x12\x08\x90\x86\xe0\x84\x76\x82\x4a\x43\x8c\x31\xd0\xfe\xcc\xb2\xee\x67\x20\x3b\xc9\xda\xb4\x41\x1b\x8c\x9b\xf5\xde\xf7\xbe\xf7\xbd\xcf\xf6\x2b\x0a\x14\x41\xcc\x04\x20\x6c\x98\xe1\x80\xd1\x74\xda\xef\x95\xe7\xf3\xf2\xfa\x72\xf1\xc7\xed\xe2\xe6\x87\xbb\xdf\x4f\x16\xdf\xdd\x94\x7f\x7d\x5d\x5e\x5f\x96\xb3\x79\xbf\x28\x10\x88\xc8\xc2\xfa\x2b\xc5\xda\x1c\xd7\xc5\x08\x21\x34\xe4\x4c\x8c\x91\x02\xee\x57\x09\x9d\x00\x18\x8c\x12\x05\xb1\x8d\x10\xc3\xa8\xe7\x12\x5b\x54\xeb\x9d\x09\x28\xcd\xa4\xf0\x8b\x02\x6d\x7d\x50\x9d\xd1\x74\x8a\x83\x7f\x68\xf5\xa1\x76\x7d\xba\x93\x54\x0a\x03\xc2\x2c\x95\x44\x6c\x82\x28\x27\x5a\xfb\x98\xcb\x11\x13\x38\x70\xf1\xce\xdc\x40\x53\x05\xb0\x0a\x59\x87\x91\x2c\x1b\x54\x3e\xb5\x31\x0e\x97\x6c\x07\xe5\x9f\x27\xe5\xec\xcb\x87\x5f\x7f\x2a\x67\x57\x95\x6b\x43\x2f\xd9\x5e\xe3\xf3\x22\x36\x59\x0b\xc5\x52\xa5\x6d\x29\x36\x82\x11\x22\xd4\x58\x6b\xb0\xf5\xe6\xfd\xbd\xb7\xad\x2f\x28\x05\x93\xc8\xc8\xc7\xef\xbd\xbb\x7f\x80\x83\x7e\xaf\xd7\xeb\x0d\x99\xc8\x72\x83\xcc\x71\x06\x3e\x4e\x58\x14\x81\xc0\x48\x90\x14\x7c\x4c\xb5\x8a\x0f\x8d\x1c\xdb\xc8\x84\xf0\x1c\x9c\xcf\x6f\xec\xef\xed\x1e\xd8\x20\x9a\x4e\x9f\xa4\x70\x8a\x0e\x69\x42\x38\x07\x31\x82\x16\x4f\x13\x74\x3c\x1b\x96\xac\x58\x67\x6f\x46\x49\x3e\x18\x29\x99\x67\xb5\xec\x76\x53\x03\x47\x06\xaf\xb9\xc0\x80\x47\x4d\x3f\x8c\x51\xc6\x09\x85\x44\xf2\x08\x94\x8f\x17\x5f\x5d\xdc\x7f\x7a\x55\x7e\xf1\x39\x46\xb5\xd0\x5c\x83\xb2\x27\x8c\x58\xd4\x50\xd8\x18\x46\x0a\x3e\xca\x99\x82\xa8\xe9\xcb\x49\x08\xbc\xa3\xd7\x80\x51\x29\x50\x9c\xb3\xba\x2e\x96\xaa\xc9\x3b\xe2\x60\xe8\xb9\xd2\x8e\x59\xab\x6b\x7d\xa1\x07\x19\xd1\xfa\x63\xa9\xa2\x7f\xe3\x43\xf9\xcb\xd9\xe2\xc7\xd3\xe6\xb2\x96\x0c\x4b\x0f\x6c\xec\xbf\x78\xc0\x25\x1d\xb7\x3c\x70\x44\x4f\x7a\xe0\xd8\x57\xc7\x4e\x80\x8e\x43\x79\xd4\x39\xf1\x63\x12\x21\x77\x84\xc8\xc7\x46\xe5\xd0\xcc\xa3\x20\x85\x34\xb4\x77\x51\xb3\xb9\xe2\x81\xab\xa8\xfd\x90\x62\x75\xd8\xc7\x02\xaf\x35\x68\x50\x9e\x5f\xbc\xfa\x5a\x39\x9f\xdd\x7f\xf3\x5b\x79\xf6\xc9\xdd\xed\xf7\xf7\x9f\x9d\x36\x7f\xb4\x9e\xc7\xa1\x37\xbf\xa7\x1b\x2d\xcc\x8d\x91\xa2\x11\x11\x1a\x81\x42\x23\x06\x99\x62\x29\x51\xc7\xee\xcc\x89\x1a\x81\x3b\x85\x95\x71\xd5\x80\x3a\x0f\x53\x66\x70\xd0\xf4\xaa\x88\x36\x3b\x14\x05\x62\x71\xfb\x47\x6d\x60\x9c\x12\xd2\xbe\x33\xbb\x6b\x9b\xdd\xea\x91\xdc\x24\x5e\x2c\xd5\x08\xcc\xce\xda\xb7\xdd\xf8\xaf\x38\x28\x6f\xbf\x7d\xf8\x79\x5e\xbd\x9f\x9d\xa1\x47\x3a\x45\x01\xd7\x2f\xd6\xf2\xdc\x56\xd5\x42\x6f\x3f\x29\xbb\x09\xdb\xe8\xda\xa9\xb7\xc4\x84\x70\x16\xed\xda\xdd\xd9\xa1\x6f\x98\x55\xda\x90\x8f\x70\x0a\x5a\x93\x51\xd7\xd6\xae\xf8\xb6\xde\x54\x4a\xaa\x77\x2a\x54\x17\x97\x97\x6d\x48\x70\xbe\x58\x1d\xfb\x39\xa5\x56\xc4\xf3\x34\x0c\x74\x4e\xe9\xff\x2f\xa4\x03\xfb\x8a\x08\x75\xf6\xfa\x06\xba\xed\xf1\xca\x73\xaf\x8f\x4b\xcc\xdf\x01\x00\x00\xff\xff\x01\xbd\x81\xa3\x1d\x08\x00\x00")

func loginTmplBytes() ([]byte, error) {
	return bindataRead(
		_loginTmpl,
		"login.tmpl",
	)
}

func loginTmpl() (*asset, error) {
	bytes, err := loginTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.tmpl", size: 2077, mode: os.FileMode(0644), modTime: time.Unix(1576054499, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0xcc, 0xb0, 0x9b, 0xea, 0x42, 0x71, 0x31, 0x7c, 0xe0, 0xb4, 0xb, 0x43, 0x31, 0xbb, 0xa1, 0x84, 0xb, 0x13, 0x8c, 0x72, 0x49, 0xb7, 0x5a, 0x7c, 0x40, 0x72, 0x2c, 0x12, 0x3b, 0x3c, 0x70}}
	return a, nil
}

var _resetSuccNotiTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xc1\x4e\x03\x31\x0c\x44\xcf\xf4\x2b\x8c\xef\x6d\x11\x47\xe8\x96\x2f\x80\x13\xe2\x1e\x12\xef\xd6\x90\x3a\xab\xd8\x5a\x51\x45\xfb\xef\x28\x59\x2a\x7a\x68\x73\x1a\xcf\x8c\x32\xaf\x14\x08\xd4\xb3\x10\xa0\xb1\x45\x42\x98\xe7\xd5\x5d\x29\xb0\x79\xaf\x67\xbd\x4a\x01\x92\x50\xd5\xea\xa2\xad\x76\x3a\xb7\x01\x76\x91\xe5\x1b\x32\xc5\x6e\xf1\xf5\x40\x64\x08\x87\x4c\x7d\x75\x9c\xb1\xdf\xb6\x60\xe3\x55\x5f\x26\xca\xca\x49\xba\xba\xf2\xb1\x68\x98\x67\xdc\xdf\x58\xfa\x52\xbc\x8d\xe1\x93\x18\x89\xb5\x06\x00\xc0\x2e\xf0\x04\x3e\x3a\xd5\x0e\x63\x1a\x58\x70\xdf\xfc\xab\xd9\x5a\x7d\x26\x12\x84\xc6\xd6\xe1\xe8\x42\x60\x19\xd6\x9f\xc9\x2c\x1d\x9f\xe0\xf1\x61\xfc\xb9\xe7\xe3\x98\xb2\x39\xb1\xe7\x8b\xaf\xea\xab\xf8\x6f\xc9\xb8\x3f\xbd\x92\xaa\x1b\xe8\xcc\xd0\xb6\xb6\x81\xa7\xa5\xff\x27\xff\xf9\x7f\x03\x00\x00\xff\xff\x1b\x13\xca\x05\x74\x01\x00\x00")

func resetSuccNotiTmplBytes() ([]byte, error) {
	return bindataRead(
		_resetSuccNotiTmpl,
		"reset-succ-noti.tmpl",
	)
}

func resetSuccNotiTmpl() (*asset, error) {
	bytes, err := resetSuccNotiTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reset-succ-noti.tmpl", size: 372, mode: os.FileMode(0644), modTime: time.Unix(1576044225, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xec, 0x22, 0x2d, 0x36, 0xe6, 0xff, 0xdc, 0x54, 0xed, 0x5d, 0x68, 0x7a, 0x68, 0x2b, 0xdb, 0xd6, 0x70, 0xf4, 0xb1, 0xcd, 0x2d, 0x37, 0x15, 0xfd, 0x4a, 0xee, 0x8a, 0xca, 0x46, 0x9c, 0xe0}}
	return a, nil
}

var _resetSuccRediTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xb1\x8e\x13\x31\x10\xad\xc9\x57\x0c\x6e\x2e\xd1\x91\xec\x1e\x25\x89\x17\x09\x09\x89\x43\x47\x83\x02\xbd\xb1\x67\x13\x83\xd7\x5e\xd9\x93\x85\xd3\x6a\x1b\x1a\xa8\x10\x42\xa2\xa0\xa4\xa2\xa1\x40\x42\x08\xa1\xd3\x7d\x4e\x94\xe3\x2f\x90\x77\x43\xb2\x70\x77\xae\x66\x3c\xcf\x6f\xde\xbc\x71\x5d\x83\xc2\x5c\x5b\x04\x46\x9a\x0c\x32\x68\x9a\xc1\x8d\xba\x86\xc9\x3c\xa6\x31\xab\x6b\x40\xab\x62\x34\xe8\xa1\x03\x9d\x6e\xd1\x00\x00\x33\xa3\xed\x0b\xf0\x68\x78\x57\x08\x4b\x44\x62\xb0\xf4\x98\xc7\x1b\x41\x5a\x26\x6d\x61\x22\x43\xb8\x5b\xa1\x0f\xda\x59\x1e\xdb\x3c\xed\x62\x68\x1a\x96\x5d\xd3\xea\x79\xd8\xf7\x09\xd2\xeb\x92\xb2\x36\xa9\x84\x07\xe2\x10\x59\x8e\x2d\xa1\xb7\xc2\xcc\x75\x11\x35\x4f\xa1\x05\x04\xa4\xb6\x50\x09\x33\x64\x1e\x73\xf4\xc3\x11\xbb\x75\x94\xa6\xe9\x68\x0a\x49\x02\x47\xa1\xc3\xe5\x2b\x2b\x29\x8a\xd8\x62\x6a\xe8\xee\xe3\xa1\xf1\x78\xba\x4b\x74\x3e\x24\xce\xd3\x51\xbd\xaf\xc7\x63\x9c\x14\xf1\x7d\xa7\xe5\xe1\xaa\x28\x9f\x3c\x3e\x89\x32\x76\xa8\x66\x17\x29\x27\x57\x05\x5a\x9a\x2c\x90\xee\x1b\x8c\xe1\xbd\xd3\x63\x35\x3c\x08\x4b\xf7\xf2\x60\x34\xd1\xd6\xa2\x7f\x30\x7f\x74\xc2\x19\x3b\xa4\x43\xb6\xf9\xf2\x61\xfd\xfe\xdd\xc5\xcf\xef\x17\xe7\x5f\xd7\x6f\xbf\x6d\x3e\x9d\xad\xcf\x3f\xfe\xfe\xfc\x83\x75\xe4\x5b\x5b\x92\xbf\xbe\x5c\xed\xa0\x74\x96\xd0\xd2\xde\x46\xa5\x2b\x90\x46\x84\xc0\x99\x71\x0b\x6d\x59\xb6\x13\x78\xa9\x36\x0e\xd2\x23\x5a\x06\xed\x02\x39\x2b\x85\x52\xda\x2e\xc6\xcf\x1c\x91\x2b\xee\xc0\xed\xb4\x7c\x75\x53\x17\xa5\xf3\x24\x2c\x4d\x7b\x54\xdd\xc6\x4a\x61\x41\x2b\xce\xe2\x80\x2c\xbb\x62\x5b\xd7\x8d\x38\x4b\xe2\xdb\xff\xe8\xc4\xf6\x53\xfd\xeb\x34\xcb\x36\xaf\x7f\xad\xdf\x9c\x75\x24\xb3\x44\xf4\xe6\x49\x94\xae\xb2\x41\x2f\xdc\x7b\xf4\x27\x00\x00\xff\xff\xcd\xc0\x99\x9f\xfe\x02\x00\x00")

func resetSuccRediTmplBytes() ([]byte, error) {
	return bindataRead(
		_resetSuccRediTmpl,
		"reset-succ-redi.tmpl",
	)
}

func resetSuccRediTmpl() (*asset, error) {
	bytes, err := resetSuccRediTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reset-succ-redi.tmpl", size: 766, mode: os.FileMode(0644), modTime: time.Unix(1576055008, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0x3d, 0xf5, 0xc6, 0xa2, 0xef, 0x3c, 0xdc, 0xf8, 0x71, 0xdb, 0xfe, 0x6e, 0x7b, 0x94, 0xeb, 0xee, 0xa0, 0xa1, 0x35, 0x95, 0xd9, 0x58, 0x70, 0xf3, 0xbd, 0xa8, 0x9a, 0xb1, 0x1f, 0xce, 0xf}}
	return a, nil
}

var _resetTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xbb\x8e\x13\x3d\x14\xc7\xeb\xe4\x29\xce\xe7\xe2\xeb\x26\x61\x05\x15\x64\x42\x81\x58\x09\x89\x9b\xf6\x42\xbb\xf2\x8c\xcf\x64\xcc\x7a\x6c\x63\x7b\xb2\x1b\x8d\x52\xd0\x40\x45\x4b\x0d\x12\xf5\xc2\x0b\xf0\x38\x10\x78\x0b\x64\x3b\xb3\x99\xcc\x06\x16\x09\x09\xba\xa3\x73\xf9\xff\x4f\x7e\x8e\xce\x34\x0d\x30\x2c\xb8\x44\x20\x8e\x3b\x81\x04\x96\xcb\xe1\xe0\xcb\xc7\x57\xab\x77\x2f\xbf\xbf\x7e\xb3\xfa\x7c\x31\x6c\x1a\x40\xc9\x7c\x7e\xd8\xe9\xb6\x6e\xb1\xee\x06\x00\x98\x08\x2e\x4f\xc1\xa0\x48\x63\xc1\x96\x88\x8e\x40\x69\xb0\xf0\x19\xea\x78\x3e\x0e\x85\x51\x6e\xed\xdd\x39\x1a\xcb\x95\x4c\x9b\x06\x46\xcf\x62\x0c\xcb\x25\x99\xfe\xc4\xea\xb9\x0d\x3e\xbb\x8b\xb9\x92\x0e\xa5\xdb\x6c\xc2\xf8\x1c\x72\x41\xad\x4d\x89\x50\x33\x2e\x09\x04\xe3\x94\x9c\x71\xe6\xca\xdb\x37\x6f\xdd\xd0\xe7\xff\xf1\x4a\x2b\xe3\xa8\x74\x64\x1a\xa6\x76\x4e\x26\x36\x37\x88\xb2\xd3\xd2\x6f\xa3\x5a\x27\x11\xdb\x76\x4f\xe8\x2b\xf7\xa6\x5d\x8e\x93\x71\xb9\xd7\x53\x1a\x33\x3e\xef\xa5\x0a\x65\xaa\xed\x25\x7c\x86\x00\xd0\xdc\x79\x64\xc4\x33\x3b\x3e\x78\xe8\x79\x41\x85\xae\x54\x2c\x25\x4f\x9f\x1c\x1e\x91\xe9\x70\x30\x18\x0c\x26\x5c\xea\xda\x81\x5b\x68\x4c\x49\xc9\x19\x43\x49\x40\xd2\x0a\x53\x92\x5b\x53\x9c\x38\x75\xea\x33\x73\x2a\x6a\x0c\xfc\xef\x1d\x1e\xec\x1f\xf9\x24\x2c\x97\xd7\x4a\x84\x8d\x4e\xf2\x92\x0a\x81\x72\x86\x5b\x3a\x6d\x32\xe8\x5c\x81\xd1\x81\xe6\x5f\xcc\x28\x91\xcc\x8c\xaa\xf5\x7a\xed\x6d\x53\x87\xe7\x8e\xf4\x28\x70\x14\xac\xf5\x23\x4d\x33\x3a\xb6\x68\x1e\xd3\x0a\x3d\x07\x2d\x68\x8e\xa5\x12\x0c\xcd\x95\xda\x7a\xf3\xda\xa2\xf1\x11\x01\x83\x94\x29\x29\x16\x29\x69\xa3\xcb\x1d\x04\xcd\x50\xec\xf0\x4d\x78\xae\x24\x14\x35\x4f\xbc\x0c\x81\x42\x99\xb6\x1e\x34\xa7\x93\x71\x18\xdd\xf1\xbb\xe3\x13\xff\x21\x0f\x4d\xad\x3d\x53\x86\xfd\x92\x49\x0f\xc3\xd7\xb7\x9f\xe2\xbf\xaf\x7d\xbb\x8d\x08\x67\xad\x82\xcf\x79\x22\x2f\x6a\x6e\x90\xfd\x3e\x06\xa1\xf2\xd3\x2d\x0c\x41\xe8\x5a\x0c\x7f\x9f\xc2\xea\xfd\xc5\xb7\x8b\x0f\xdb\x20\x0c\x26\xbb\x58\x18\xfc\xd7\x34\xb2\xda\x39\x25\x5b\xab\xcc\x49\xc8\x9c\x4c\xb4\xe1\x15\x35\x8b\x10\x0b\x6a\x66\x18\xa2\x2c\x9a\x46\x32\xb6\xce\x2a\xee\x48\xef\xdc\x44\xb9\xfe\xc9\xf1\xe7\xa4\x97\xd3\xad\x65\x85\xd6\xd2\x19\x46\xfa\xbe\xd4\x34\xc0\x0b\x18\x3d\x90\x73\x2a\x38\xdb\xf7\xb7\xc9\x7f\x1e\x2e\xab\xa3\xfb\xc6\x28\xf3\x28\x8e\xc5\xca\x7a\x0c\x85\xc5\x6e\xef\xff\x32\xb3\xfa\x4e\xb7\x21\x9e\x72\x4f\x78\xac\x3b\x47\x78\xc3\x66\x1d\x6e\x7a\x7f\x04\x00\x00\xff\xff\x03\x5a\x6e\x38\xac\x06\x00\x00")

func resetTmplBytes() ([]byte, error) {
	return bindataRead(
		_resetTmpl,
		"reset.tmpl",
	)
}

func resetTmpl() (*asset, error) {
	bytes, err := resetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reset.tmpl", size: 1708, mode: os.FileMode(0644), modTime: time.Unix(1576044225, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x5d, 0x49, 0x51, 0x29, 0x99, 0x45, 0xb6, 0x91, 0x86, 0x86, 0x80, 0x6, 0xb2, 0xf6, 0xd4, 0x84, 0x9b, 0xa7, 0x54, 0x75, 0x22, 0x13, 0x1a, 0x34, 0x29, 0x6, 0x36, 0xc5, 0x9b, 0xf3, 0xd2}}
	return a, nil
}

var _staticLoginBgJpg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x79\x54\x53\xe7\xb7\xbd\x21\x28\x60\x15\x13\x7e\x5a\x11\xa1\x5e\x6e\x90\x2a\x81\xe4\xde\x04\x42\x08\x01\xcc\x58\xf0\x99\x2a\xa0\x04\xac\x0c\x21\x03\x46\xc8\x60\x12\x4c\x50\x91\xca\xa0\xd1\x32\x94\x02\x15\x07\xac\x0a\x38\x54\x0c\x0a\x5a\x54\x28\x48\x14\x07\x04\x29\xea\x93\x49\xab\x68\x71\x44\x14\x2a\x5a\x11\xcc\x5b\x0c\x91\xae\xae\xae\xae\xae\xf7\x3b\x7f\x7d\x39\x67\x9f\x7d\xbe\xef\x64\xef\x6b\x6a\x37\x75\x03\xf6\x1c\x9d\x54\x02\x00\x41\x41\x6e\x80\x35\x30\x19\xa6\x5e\x00\xcb\x4e\x14\xc6\x27\x01\x28\xc0\x12\x00\x00\x11\x00\x98\xba\xd1\xb2\x35\x1a\x8d\x92\x46\x24\xca\xd5\x04\x81\x48\x11\x2b\x26\x08\x15\x32\xa2\x4e\xa0\x24\x22\x04\x98\x08\xd0\x03\x74\x4a\x81\x30\x5e\xac\x01\x63\xc5\x71\x52\xb9\x1f\xf4\xb2\xba\x0e\x02\xa5\x22\x3f\x88\xef\xc5\x83\x79\x4a\x96\x78\x8d\x34\x70\x83\x4a\x1c\xba\xe1\xcb\x15\xc2\x0d\xf1\x42\x1f\x11\x14\xe0\x0f\xd2\x75\x34\x9d\x4c\x29\x13\x6b\x04\xa0\x4e\x96\x20\x57\xd3\x74\x7e\xd0\x18\x39\x4d\xae\xa6\x8d\xa6\x89\x10\x38\x06\xd1\xc4\xfb\x41\x8c\xd1\x02\x18\xce\x5b\x0e\xb2\x14\x2a\x31\xe8\x45\x80\x3d\x84\x30\x05\x06\x29\x08\x01\x21\x7b\x7a\x7b\x7b\xbb\x83\x24\x18\x81\x89\x30\x89\x88\x90\x3c\x10\x6f\x1a\x99\x44\x83\x61\x70\x22\x20\x7f\x90\xae\x12\x49\x68\x21\x6c\xee\xc4\x2c\x95\x48\xe2\x07\x4d\x3c\x4a\xab\xd5\x12\xb4\x64\x82\x42\x15\x47\x44\x7c\x7c\x7c\x46\x39\x48\x24\x0f\x95\x48\xe2\xa1\x4e\x92\x6b\x04\x3a\x0f\xb9\x1a\x67\x66\x60\x8b\xd5\x42\x95\x54\xa9\x91\x2a\xe4\xe0\xe8\x6f\x41\xac\x22\x51\xe3\x07\x41\xe6\x27\xc8\x94\x3c\xde\x47\xe2\xbf\xdd\x96\x4c\x46\x34\xa3\xd5\x9a\x10\xb1\xe4\x9f\xd1\xea\x15\x49\x4a\x31\x31\x44\xac\x56\x24\xaa\x84\xe2\x10\xb1\x04\xf7\xa7\x51\xff\xdc\x3a\x0a\x54\xf2\x78\xb4\x65\x2a\x69\x9c\x54\x2e\x48\x60\x2b\x84\x89\x32\xb1\x5c\x13\xc4\xf6\x83\x74\x32\x25\x41\x24\x15\xd1\x60\x32\x15\x46\x10\x6f\x4f\xd8\x9b\x04\x53\xa8\x08\x42\x25\x91\x18\x2c\x32\x99\xe4\x45\xf6\x62\x32\x49\x24\x8a\x99\xe3\xef\x7a\xc9\x5c\x0a\x87\x4b\x82\x39\x5c\x0a\xd5\x1b\x41\x38\x24\xaa\xb7\x0f\x83\x03\xb3\x60\x6f\x0a\xc2\x26\x51\x29\x0c\x73\x6f\x90\x5c\xad\x11\xc8\x85\x62\x73\xaf\x74\xb2\x97\xfd\x8f\xbd\x34\x96\x4a\x2c\xd0\x28\x54\x2b\x14\x8a\x04\xb3\x02\x96\xaf\x51\x68\x14\xea\x35\x0a\x25\xc8\x0a\xf5\x02\xf9\x52\xb9\x48\xa1\x55\x8f\xfe\x39\x13\xf7\x14\xab\xa4\xeb\xc5\x22\xae\x4a\x21\x03\xc7\xb6\x4b\x93\xfe\xcd\x74\x1f\x2e\x89\x81\xc0\x1c\x0a\xcb\x9b\xc3\xe5\x90\x10\x84\x09\x33\x7c\x58\x64\x0e\x99\x4a\xe6\x92\xb9\x3e\x64\x32\x34\xd1\x2b\xfa\xff\x6c\x8c\xe8\x0f\xd2\x89\x7f\x91\x8a\x39\x15\xc2\xe6\x8e\x1e\x3f\x0a\xdf\x1f\x9c\xb4\x8e\x58\x2e\xf2\x83\x54\x50\x80\xbf\xa9\x0f\xb0\x1d\x7b\x2c\x20\x3a\x0f\x00\x00\xca\xd4\x05\xa4\x03\xa8\x7f\x1f\x16\x93\x81\xfe\x18\xe6\xda\x58\x19\xf5\xe7\xca\xbf\x0c\xd3\x79\x00\x6b\x0d\xa4\x01\x4a\x34\x0a\x0b\x58\x60\x51\x68\x2c\xca\x74\x11\xc8\x98\xb8\xd8\xe4\xf7\xc3\x12\x0d\xa0\xa6\xd8\xfc\x25\x09\x00\x28\xc0\xc2\x0a\x03\x00\x53\x50\x68\xab\x29\x33\x2d\xd1\xe6\xac\x05\xda\x12\x1b\x3a\xcb\xd3\x19\xb1\x23\xfd\xa7\x32\x9f\xd1\xaa\xd6\xdc\x0a\x16\x1c\xa8\x57\xa5\x7e\x77\xb0\xe2\x06\x8e\x9c\x27\x3a\xb5\x25\x17\x0a\x59\x77\x92\x89\x45\x01\x16\x16\xe8\x3f\x73\xa2\xb0\xce\x0c\x64\x5d\xee\x96\x7a\x53\x27\x30\x1d\x8d\x02\x2c\xb0\x68\x2c\x10\x00\xfc\xf1\x02\x8f\x79\x59\xf0\xc0\xf9\x5e\xf1\x36\x37\xc7\x85\x19\x82\x55\xcf\x67\xf6\x3d\x44\xc7\xb1\xd2\x89\xf3\x23\x93\x2d\xb3\x1a\xeb\x5d\x03\x30\xd6\x02\x68\xc1\x03\xc7\xdf\xfd\xd2\xf5\x2d\x38\x3d\x41\x17\x36\xa4\xad\x4a\x40\xc7\x45\x2f\xb7\x86\x28\xe7\x86\x6a\xca\x2f\x6b\xec\x62\x94\x5b\xed\xa0\x30\xe7\x7b\xf8\x8b\x8b\xb3\x31\xdd\x6c\xbc\x75\x5b\x78\x8a\xd6\x7e\x1e\xcd\x11\xd4\x0f\xf5\x69\xec\xbc\xf1\x96\x85\xc3\x8e\xce\xe9\xdb\x77\xea\xd5\x4d\x6f\xec\x70\xf4\x4c\x90\xd1\xfd\xd5\xd3\x5f\xef\x9e\x98\x51\x94\xec\x08\xea\x3b\x9f\x3f\x1b\xa8\x73\x3a\x1f\xb4\xc5\x68\x1f\xf8\x8e\x78\xe4\x07\xe5\x29\xfb\x2b\x86\xb0\xb9\xe4\xa6\x88\xa6\x5f\x24\x42\xc4\x9e\x92\xd1\xbd\x3e\x41\xd9\xfb\x7e\x4b\x69\xb2\xbb\xe2\xc7\xde\xce\x53\xf6\x47\x6b\xfb\x05\x1d\x87\xb8\x0f\xf7\xc9\xa6\xf1\x17\x1e\x73\x7d\x95\x35\x0e\x48\x3d\x90\xec\xe1\x34\xe8\xb0\x73\xd8\xfe\xdd\xcc\x7d\xdc\xb9\xee\x4d\x65\xef\x30\x11\x28\x38\x36\xb8\x86\xd0\x9c\xed\xf4\x83\xd2\x93\x78\x68\xe2\xb4\xa2\xbc\xb4\xc7\xbf\xa4\xb6\xc2\x05\x61\xb6\xb6\x38\xe5\xf9\xb1\x07\x76\x4f\xc1\x48\xd6\x2e\x37\x97\x89\xa5\x59\x83\x91\x7b\xfc\xa6\xe2\xab\x34\xb5\x2c\xcf\x2b\x5d\xf4\xdd\xb3\x0c\xcb\xc3\x78\x0f\x5a\x3f\x32\x95\x16\xd7\x96\x7a\xa4\xd4\x67\x66\x06\xd2\x73\x3b\xdc\x9b\xa8\x9b\xf4\xee\x5b\x17\xa5\xad\xf9\x75\x8e\xe4\xb2\x6d\xcb\x19\xb7\x39\x37\xa3\x26\x4e\xfc\x9b\x4b\x2e\xfa\xf6\xe8\xf4\xc1\xe7\x47\x17\xec\x60\x5e\x30\x76\x7e\xe4\xf5\x54\x6e\x4f\x4c\xde\xfc\xb4\x74\x38\x97\xd4\x6f\x9b\xb4\xcf\xc8\x8e\xcb\x4d\xb7\xa6\xe3\x93\x7d\xbb\x7e\x42\x55\x96\x17\xa7\x63\xe7\x45\x26\x47\xf1\x1f\x9e\xb1\x81\xa9\x2c\x1b\xa7\x05\xc8\x9b\xbe\x95\x6d\xfa\xd7\x15\xb9\x70\x9a\x7b\x43\xe1\xf5\x25\xf1\xef\xa7\x37\xb4\x1a\x1d\x90\xe3\x3f\x74\x77\xbd\x60\x34\x1a\x1f\x15\xbe\x95\x7c\xc0\x77\xfa\x6a\x8f\x6c\x9c\xfa\x2c\xae\x32\x27\xa4\xf4\xb1\x33\x36\xd4\x83\xb3\x27\xbc\xc4\x53\xf8\x55\xc0\x85\xaa\xce\x8c\x82\x8c\xf6\xa5\xc9\x0b\x5a\xdb\x72\xee\x07\xac\xba\xcc\x10\xb5\x1b\x0e\x6f\xa7\x97\x44\x9f\x39\xd4\x14\x32\x41\xc3\xbc\x72\x61\xcd\xa5\x9f\x52\xb6\x29\x4e\x7f\x82\xb7\x5c\xb2\x34\xf9\xdc\xeb\x22\x5d\xce\x1f\xb7\xb6\xa7\xcf\x5d\xfb\x79\xfe\x6f\x87\x47\x3e\x71\x4b\x9a\xcf\xf5\xaa\x1c\xf6\x4d\x3e\x12\x11\xbe\xfa\xe6\x67\xbd\x39\x3b\x06\x29\x7d\x3d\xd5\x07\x4f\x77\x54\x86\x94\x3e\xca\x3f\xbc\x29\xa2\x72\x07\xcb\x8c\xb0\x8f\xa2\x09\x9f\x1a\xb2\x6b\x52\x2c\x38\x6b\x2f\x88\xf3\x62\x7a\x96\xd9\x25\x05\x9e\xf5\xe1\x50\x0e\x7e\xdb\x9a\x95\x60\x02\x6c\xef\xad\xfd\x34\x6c\xde\x47\xbe\xf5\x63\x1a\x62\x66\x03\xff\xa5\x86\x10\xd1\xbc\xbe\xb9\x9e\xc5\xb8\xb0\x4d\x45\xc6\x97\x99\x17\xef\xdf\x3a\xa0\xc9\x15\x95\x5b\x51\x65\x2b\x0c\x47\x6e\x10\x9a\x0f\x8b\x7e\xcc\x7b\x79\x2c\x0f\xa9\x72\xfc\x66\x67\xfe\x15\x7e\x41\x68\x60\xa4\x4b\x04\xbe\xfe\x3a\x7e\x25\xfe\xa4\x03\x63\x51\xa2\x94\x13\x16\x0d\x35\xef\xed\x88\xc0\xc6\xf5\x20\x4b\x8f\x30\x9f\x42\x57\xa3\x6c\xd7\xad\x3a\x1a\x5f\xf2\xcd\x02\x9d\x4f\xc3\xda\x92\xed\x48\xc9\xa2\xc1\x5d\x9e\xc5\xb8\xd6\xbe\x14\xf6\xdb\x06\xa5\xc4\xf5\xf2\xb9\xc0\x0a\x7e\xda\xde\x30\x37\x3e\xb5\xe5\xee\x9e\x2f\xaf\xae\xec\x3a\xa7\xb9\x5a\xd8\x25\xd2\xff\xfe\x36\x90\x9f\x17\x3e\x41\x11\x7e\x34\x8a\x2e\xb5\x59\xf5\xec\x46\xc5\x49\x67\xfa\xae\x5b\x17\xd2\x57\xd7\x1c\x5a\x54\x80\x5d\x68\x1e\xef\x31\x7e\xcd\xe3\x2b\x4e\x95\xb1\x6a\xf9\xfa\x0c\x47\x94\x51\x1f\x36\xdb\x70\xe2\x43\x1f\x4c\xd1\x50\x99\xfd\x83\x6d\xbf\x04\xde\x29\xb3\x13\xf6\x03\x5b\xed\xa0\x28\xe7\x16\x72\x7b\x60\xe6\x00\x35\xf5\x71\x86\xe2\xf0\xc6\xf5\xe7\x29\x89\x83\x40\x2a\x2e\xbe\xfc\x58\xe3\xb0\x96\xe1\x6a\x35\x6a\xdb\x58\xa7\x81\x1a\xb6\x75\xb7\xed\x2c\xe6\x89\xac\xc4\x6d\x6f\xd7\x6d\xa9\x3c\x60\xb4\xce\x31\x3c\x66\xe0\x54\x27\x82\x72\xea\x8d\xf6\x81\xbb\x74\xdb\xe8\x2d\x02\x88\x7c\xc5\x68\xf9\xd9\xec\xda\xa2\x17\x5d\x40\x47\x5b\xab\xd1\x3a\xcb\x50\x5b\x8e\xef\xbf\x63\x59\xe8\xe8\x9c\x9e\xf3\xdd\xbb\xbc\xbe\xef\xaf\xa6\x7d\x88\x68\x2e\xd9\xf5\x88\x10\x5c\x98\xe9\x42\xb4\x12\xcf\x7f\xb2\xdf\xab\x33\x72\x59\x51\xc7\xe9\x84\xc2\x77\x2f\x0b\x28\x8b\x0e\x71\x1f\x16\x6d\x02\xcb\x8a\x9c\x75\xbe\x0b\x4d\x00\x07\x65\x30\x36\xf9\x4b\x4a\x87\x5d\xa7\x65\xfa\x27\x39\x04\x49\xc4\x71\xcb\x5e\xc5\x14\xc2\x59\xf7\x7b\x8b\x47\x66\x4d\xad\x9e\x31\x8e\xb2\x30\xdc\x18\x88\xf6\xac\xad\xe8\x80\x35\xad\x8d\x09\xc5\x43\x2e\x0d\xdc\x24\xe6\xab\xf5\xc1\x1f\x76\x4c\x89\xcc\xc8\xfa\xbd\x9a\xb2\xd1\xd5\x7f\x63\x29\xef\x3b\xe9\x40\x07\xed\x66\x75\xfe\xec\xbc\x12\xc5\xf8\xe8\xf6\x28\xdf\x47\xf1\x7c\x63\xcc\x91\x8b\x69\x57\x1a\x93\xec\x95\x4f\x87\x52\x63\x8c\x73\xd2\x2a\x72\x5e\x2f\x77\xe8\xf5\x1a\x1b\x32\xad\x9a\x37\xfe\x71\xfb\xc2\x5a\x79\x70\x76\x7a\x7c\x59\x40\x75\xe6\x8c\x22\x5b\x0c\x3b\x59\x4b\xb3\x99\x57\x90\xba\x74\xb3\x2d\xc6\xc8\xbe\x76\xd1\xe7\xd1\x46\x1b\xec\x3e\x2e\x06\x7c\x75\xfc\xf5\x4b\x79\xfb\xd4\xeb\xb5\xd9\x18\xb6\x2c\x71\x30\x29\x3a\xfb\xbe\xcb\xf9\xee\xe9\x2e\x9a\xfc\xcb\x5d\x67\xf9\x51\xb8\x1b\x8d\x6c\xe3\xf4\xca\x4f\x85\x3e\x8b\xc8\x23\x5b\x63\x9f\x74\xcf\xb0\xbf\xdd\xf2\xea\xc5\x9b\xfd\x3d\x82\x44\x57\xbf\x8e\xba\x1d\x6f\xb2\xef\x0e\x39\xdd\x75\x58\xf5\x15\x75\x10\x87\x6f\xb6\xd6\x1f\x6d\x74\xef\x6c\x70\x2e\x76\xe8\xf8\xe0\x54\x7b\xcb\xbd\x8c\x60\x14\x3e\x25\x64\xd7\xa4\xa0\x86\x6e\xd3\x3e\x71\x6d\x48\xa4\x07\xf5\x40\x23\x0d\x94\xd8\x49\x2b\x70\x27\xad\x00\x85\x08\x5f\xb4\x95\x3c\xbf\x98\x72\xa9\x64\x29\x78\x2d\x98\x7e\x78\x41\xc0\x93\x88\xd0\x2b\x43\x13\x2e\x1d\x33\xbb\x68\x13\xff\x68\x95\xd6\xe3\xee\x6c\x43\xf3\xee\x02\xa2\x67\xa9\xef\x83\xe6\xbd\x93\x3e\x36\xf6\xdf\x9c\xcf\xdb\x40\xa8\x49\xb1\xe0\xc5\x3b\x4d\x19\x5e\x6f\x2b\x9d\x1b\x12\xd4\x03\x35\xdf\x9d\xd5\x39\x69\xd0\x70\xd9\xf8\x1b\x0e\x88\x05\x1d\xe1\xdb\x36\x95\x63\xa7\x51\xd1\x19\x98\x32\x5c\xa4\x60\xe4\x4e\x4c\xc2\x13\x65\x2a\xee\xf9\xd9\x71\xcd\xbd\x52\x6e\xb5\x73\x35\x6b\x0e\xde\x62\x65\xd6\xdc\x6b\xa5\x59\x73\xa8\x51\xcd\xe1\x7e\xbb\xf4\xad\xe2\x8c\xe8\xda\x56\x6e\xd9\xd6\x40\x9a\x84\xf0\xaa\x69\x69\xf0\x51\xe6\x73\xd7\xfa\x7b\x8c\xd5\xf5\x67\x56\xe2\xf7\x4a\xe7\x48\x6e\x9e\x54\x95\xbc\xbf\x24\xde\x9f\x78\xa0\xca\x51\x6f\x02\x54\xb3\x1b\x76\xef\x9e\x80\x18\xcf\xcc\xc6\x7f\x91\x05\xe6\x9f\xab\xe8\xde\x64\x75\xcd\x6d\x7a\xc5\x1e\x3c\x44\x1c\x90\xd8\x14\x22\x76\x59\xb7\x79\x69\xb5\xa9\x67\xd3\x94\x6e\xab\xcc\xd8\x95\xf8\xc6\x2c\xf0\x5e\x44\x1e\x61\xee\x67\xd9\x21\xcc\xba\x83\x1b\x8d\xdb\xd3\x10\xb2\xb7\x75\xa4\xa8\xdd\xf7\x09\xbe\x90\x6f\x51\x2a\xcc\x82\x7a\x53\xdb\xcf\x46\x56\x1f\xe6\xa1\x8f\xcf\xf8\x29\x30\xbb\xa8\xe9\xeb\x33\x95\xa1\x2b\x26\xc9\xf8\x39\x0e\xcc\xb0\x4a\xca\x6a\xb7\x93\xe0\xe9\x99\xb4\x42\xa5\xbe\x2e\x14\x59\x5a\x7f\x74\xf2\x3e\x1e\x89\x79\x31\x2f\xf7\x1b\x04\xab\xdd\xbe\x2f\xd0\x6b\x1b\xfb\x31\xc5\x5f\x53\x83\xa7\x19\x4f\xdf\x9e\x7f\xf7\xd2\xd4\xeb\xdb\xac\xa3\xfc\xcf\x0d\x8d\xcb\x09\xc4\x18\xd9\xff\x33\x21\xa7\x2f\x30\xab\x3f\xca\x69\xbf\x59\x4e\x4f\xc6\xe4\xc4\x1e\x33\xf7\x16\x47\x67\xa3\x3e\x0c\x6b\x36\x37\x03\x3b\x78\xe7\x89\x8b\x3c\xcc\x06\xf9\x83\xca\xb2\xf9\x0f\x11\xf3\x78\x57\xaf\x0b\x37\xc9\x7e\x71\x9a\xb1\xea\xe6\xcf\xd5\x31\xf3\x68\x43\x54\x06\xf6\x74\xdb\xff\xf6\x6c\xf6\xfd\x3a\x0f\x9d\x0e\xe7\xdd\xce\x8d\xac\x2e\x74\x52\x0c\xb5\x1a\x62\x5b\x56\xef\xcf\x76\xe8\x9f\x5e\x27\x78\x66\xa3\x3b\xd9\x16\xf3\xab\xd5\xa3\x9f\x47\xa4\x47\xae\xcb\x97\xbc\x4d\x59\x2c\xd3\x65\x47\x9f\x18\xb4\xa8\x89\xd8\xf1\x94\x88\x1e\x88\x6e\x2e\x8e\xce\xaf\x7d\xfc\xb9\xb6\xc6\x26\x0a\xb7\xb3\xd7\x6f\x71\xf9\x3c\x62\xfb\x86\xd4\x28\xf7\x91\xf5\xc7\xce\x9b\x80\xeb\xc9\x0e\xcf\x76\x6a\x17\x16\x67\xed\x7a\x1c\xd8\xf3\x7e\xe6\x72\x56\x43\x76\x95\x26\x66\xb3\xba\xee\xf6\xee\xcc\x47\xbf\x95\x6b\x5f\x4f\x6d\xd3\x8f\xe6\xf1\x0d\xbb\x0c\xbb\x4f\x04\x2c\x1a\xee\xf4\x7a\x47\xd0\xf9\xfe\x7c\x7f\x49\xbf\x63\x9d\xe0\xd9\x14\x5d\xc7\xe6\x0b\xb7\xec\xfa\x4d\x1d\xff\x17\x00\x00\xff\xff\x1c\xc3\x94\x34\x34\x0d\x00\x00")

func staticLoginBgJpgBytes() ([]byte, error) {
	return bindataRead(
		_staticLoginBgJpg,
		"static/login-bg.jpg",
	)
}

func staticLoginBgJpg() (*asset, error) {
	bytes, err := staticLoginBgJpgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/login-bg.jpg", size: 3380, mode: os.FileMode(0644), modTime: time.Unix(1575888537, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xd5, 0x8, 0xbf, 0x90, 0x49, 0x22, 0x99, 0x6e, 0x9, 0xc3, 0x36, 0x65, 0xa5, 0x7, 0x25, 0xa2, 0xc0, 0x1b, 0x13, 0x83, 0x6e, 0xff, 0x5, 0xb3, 0x85, 0xad, 0x99, 0x92, 0xf9, 0xeb, 0xea}}
	return a, nil
}

var _staticStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\xdb\x72\x9b\x3c\x10\xc7\xef\xfd\x14\xfb\x25\xf3\xcd\x24\x9e\x8a\xc8\xc7\x89\xe5\x9b\x36\x6d\xfd\x1e\x02\x64\xac\x5a\x48\x1a\x21\x1a\x92\x4c\xde\xbd\x83\x40\x20\x0c\x71\x3b\xbd\x28\x17\x89\x11\xda\xdd\xff\xfe\xf6\x30\x87\xb7\x19\x40\xac\x2a\x54\xf0\x57\x2e\x33\x02\xb1\x32\x29\x33\x28\x56\xd5\x7e\x06\x90\x53\x93\x71\x49\x00\xd7\x2f\x9a\xa6\xa9\xbb\xe3\xde\xde\x67\x00\x33\x80\x39\x39\xaa\xa4\x2c\x9c\x9f\xfa\x51\xa5\x15\x5c\x32\x02\x52\x49\xe6\xef\x9d\x6c\x2e\x3e\xb9\x40\xe9\x4b\x7b\xf3\x99\xa7\xf6\x44\x60\x81\xf1\xff\x7b\x77\x10\xd3\xe4\x9c\x19\x55\xca\x14\x19\xa6\x19\xb5\x04\x9a\xff\xa3\xcf\x3c\xa7\x19\x23\x50\x1a\x71\x77\x13\x3d\x08\x95\x71\x89\xe2\x2c\xfa\xa1\xb3\x9b\xfb\xe6\xf2\xc3\x3c\xbc\x9f\x28\xa1\x0c\x81\xdb\xd5\x7a\xf7\xf8\xed\xe9\x3f\x9e\x6b\x65\x2c\x95\x76\x0f\xf3\x87\x56\x60\x27\xec\xa8\xa4\x45\x47\x9a\x73\xf1\x42\xe0\x8b\xe1\x54\x0c\x32\xdf\x60\x5d\xf9\xa4\x22\x17\xd9\x59\x79\x4c\x4b\xac\x2b\xa0\xa5\x55\xf5\x9d\x36\xc3\xd5\x7a\x64\x83\x8a\xc4\x30\xd6\x98\x4e\xe8\x3c\x1c\x0e\x83\xa0\xce\xab\xfb\xe3\x7f\xec\x9d\x64\x57\x28\x43\x53\x5e\x16\x04\x36\xba\xea\x8b\x12\x51\xad\x91\xe5\x56\x30\x17\xc3\xb2\xca\x22\x2a\x78\x26\x09\x24\x4c\x5a\x66\x6a\x07\x6d\xb8\x58\xd0\xe4\xdc\xd7\x1a\xc5\xca\x5a\x95\xd7\x95\xe9\x65\xf7\xca\x8f\xca\xe4\x57\x7c\xba\x1c\x13\x25\xad\x51\x02\xd5\x69\xe9\x80\xcf\x47\xae\xb9\xd4\xa5\xbd\xe2\x74\x02\xd1\xf7\xaf\x07\x7c\x58\xf4\x18\x08\x2c\x75\x05\x85\x12\x3c\x05\x6b\xa8\x2c\x34\x35\x4c\xda\x09\x4e\xab\x26\xb4\xab\x73\xc1\x5f\x19\x81\xc5\x36\x38\x7a\x66\x3c\x3b\xd9\x9a\xf9\xb0\xe5\x17\x0e\x7f\x50\xd6\xa5\x6f\x05\x17\x8e\x5b\xae\xa4\x1f\x1e\x88\x36\xc5\x65\x7a\xc1\x94\x8c\x15\xb7\x9d\xb9\xf7\xa3\x78\xa2\xa9\x7a\x1e\x4e\x50\xcd\x35\xb6\xb2\x1d\x9e\xdf\x26\x1d\x42\x23\xa1\xff\xae\xec\xb7\x47\xf7\x34\x67\x13\x34\x00\xea\x31\x46\x27\xcf\x63\xe3\x8f\x27\x90\xb4\x85\x4b\x59\xa2\x0c\x6d\x48\x78\xed\xed\xa7\xcb\x94\x3e\x2a\xcb\x34\x80\x21\x64\x1c\x2d\x1b\xbe\x00\x29\x2f\xb4\xa0\x2f\x75\x13\xab\xa6\x89\xc7\xf5\x09\x96\x58\x37\x9a\x01\x51\x72\x52\x3f\x99\xf1\x5c\xc7\x9d\xb6\xdc\x3d\xe2\xa7\xdd\x78\x10\x04\x97\xe7\xd6\x2a\xa4\xb7\xf4\x41\xbd\xfd\x7a\xbd\xfe\x58\x6b\x37\x19\x56\xe9\xde\xf8\x7d\x76\x31\x6f\x51\x72\x62\xc9\x39\x56\xd5\x5b\x98\xcf\xa2\xdd\x08\x01\xe6\x76\x74\x04\x3b\xda\x8b\x8d\x33\xf4\x03\x91\x6b\x4a\xd4\xb9\x3c\x0a\x55\x2f\x5c\x6f\xd8\x51\xac\x81\x41\xb0\x31\x07\x3c\x57\xba\xba\xb6\x25\xfa\x68\x82\xc6\x4c\xbc\x5d\x95\x39\xda\x8d\x51\xce\x8a\x82\x66\xac\x65\xdc\x6f\xe0\xbe\xe9\xfa\x4e\xde\xee\xb6\x8b\x71\x27\x6f\xa6\xd8\x0c\x77\xd5\x0c\xe0\x73\xce\x52\x4e\xe1\x2e\xa7\x15\xf2\x2b\x7b\x8b\x75\x75\xdf\x46\xbe\x2a\x0b\x20\xe7\xb2\x1b\x92\x15\xcb\x7d\x5d\x43\x1d\xd1\xc6\x9f\xbf\x5f\x54\xf7\xc2\x29\x2a\xca\x24\xf9\x83\x84\x31\x7e\xc4\x18\xff\xdb\x84\x43\x6d\x7f\x93\xf5\xaf\x00\x00\x00\xff\xff\xe9\x74\xd3\x9b\x6a\x08\x00\x00")

func staticStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticStyleCss,
		"static/style.css",
	)
}

func staticStyleCss() (*asset, error) {
	bytes, err := staticStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/style.css", size: 2154, mode: os.FileMode(0644), modTime: time.Unix(1575977834, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2c, 0x9f, 0x9a, 0xfd, 0xd2, 0x2, 0xaa, 0xf6, 0x8d, 0xb0, 0x88, 0x5e, 0xd4, 0x94, 0xab, 0xb1, 0x56, 0x4b, 0x66, 0xdf, 0x71, 0x4, 0x7e, 0x4f, 0x2f, 0x9f, 0x7a, 0xed, 0x7b, 0xa4, 0x65, 0x24}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".DS_Store": Ds_store,

	"email-notify.tmpl": emailNotifyTmpl,

	"forget-succ.tmpl": forgetSuccTmpl,

	"forget.tmpl": forgetTmpl,

	"login.tmpl": loginTmpl,

	"reset-succ-noti.tmpl": resetSuccNotiTmpl,

	"reset-succ-redi.tmpl": resetSuccRediTmpl,

	"reset.tmpl": resetTmpl,

	"static/login-bg.jpg": staticLoginBgJpg,

	"static/style.css": staticStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".DS_Store":            &bintree{Ds_store, map[string]*bintree{}},
	"email-notify.tmpl":    &bintree{emailNotifyTmpl, map[string]*bintree{}},
	"forget-succ.tmpl":     &bintree{forgetSuccTmpl, map[string]*bintree{}},
	"forget.tmpl":          &bintree{forgetTmpl, map[string]*bintree{}},
	"login.tmpl":           &bintree{loginTmpl, map[string]*bintree{}},
	"reset-succ-noti.tmpl": &bintree{resetSuccNotiTmpl, map[string]*bintree{}},
	"reset-succ-redi.tmpl": &bintree{resetSuccRediTmpl, map[string]*bintree{}},
	"reset.tmpl":           &bintree{resetTmpl, map[string]*bintree{}},
	"static": &bintree{nil, map[string]*bintree{
		"login-bg.jpg": &bintree{staticLoginBgJpg, map[string]*bintree{}},
		"style.css":    &bintree{staticStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
